import groovy.json.JsonSlurper

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-role
  restartPolicy: Never
  containers:
  - name: awscli
    image: amazon/aws-cli:latest
    command: ['cat']
    tty: true
  - name: jnlp
    image: jenkins/inbound-agent
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: mailer
    image: curlimages/curl:7.85.0
    command:
    - sh
    - -c
    - 'while true; do sleep 30; done'
"""
        }
    }

    stages {
        stage('AWS Config') {
            steps {
                container('awscli') {
                    script {
                        sh """
                        aws sts assume-role \\
                           --role-arn arn:aws:iam::894333990227:role/delegatedadmin/developer/cloudbee-eacms-role \\
                           --role-session-name session \\
                           --output text \\
                           --query Credentials \\
                           > /tmp/role-creds.txt

                        cat > .aws-creds <<EOF
[default]
aws_access_key_id = \$(cut -f1 /tmp/role-creds.txt)
aws_secret_access_key = \$(cut -f3 /tmp/role-creds.txt)
aws_session_token = \$(cut -f4 /tmp/role-creds.txt)
EOF

                        mkdir -p \$HOME/.aws
                        cp -v .aws-creds \$HOME/.aws/credentials
                        unset AWS_WEB_IDENTITY_TOKEN_FILE

                        aws sts get-caller-identity
                        """

                        env.AWS_ACCESS_KEY_ID = sh(script: "cut -f1 /tmp/role-creds.txt", returnStdout: true).trim()
                        env.AWS_SECRET_ACCESS_KEY = sh(script: "cut -f3 /tmp/role-creds.txt", returnStdout: true).trim()
                        env.AWS_SESSION_TOKEN = sh(script: "cut -f4 /tmp/role-creds.txt", returnStdout: true).trim()
                    }
                }
            }
        }
        
        stage('Checking Keys Age and Rotate') {
            steps {
                container('awscli') {
                    script {
                        try {
                            def USERS_FILE = readFile('users.txt').split('\n').collect { it.trim() }
                            def OLD_KEYS_USERS = []
                            
                            // Enhanced error handling for CURRENT_DATE
                            try {
                                def CURRENT_DATE = sh(script: "date +%Y-%m-%d", returnStdout: true).trim()
                                echo "Current Date: ${CURRENT_DATE}"
                            } catch (Exception e) {
                                echo "Error getting current date: ${e}"
                            }

                            def OUTPUT_DIR = "/home/mike/MikeNewkeys"
                            def logfile = "/home/mike/MikeNewkeys/rotation_keys.log"

                            isValidUsername = { username ->
                                return username ==~ /^[a-zA-Z0-9+=,.@_-]+$/
                            }

                            USERS_FILE.each { USER ->
                                if (!isValidUsername(USER)) {
                                    sh "echo 'Invalid username: ${USER}. Skipping...' >> ${logfile}"
                                    return
                                }

                                sh "echo 'Checking access keys for user: ${USER}' >> ${logfile}"
                                def ACCESS_KEYS = sh(script: "aws iam list-access-keys --user-name ${USER} --output json", returnStdout: true).trim()
                                def jsonSlurper = new JsonSlurper()
                                def keys = jsonSlurper.parseText(ACCESS_KEYS)
                                def ACTIVE_KEYS = []
                                def INACTIVE_KEY_ID = ""

                                if (keys.AccessKeyMetadata) {
                                    keys.AccessKeyMetadata.each { key ->
                                        def keyStatus = key.Status
                                        def creationDate = key.CreateDate
                                        def accessKeyId = key.AccessKeyId
                                        echo "Processing key ID: ${accessKeyId} for user: ${USER}"
                                        if (accessKeyId) {
                                            def lastUsed = sh(script: "aws iam get-access-key-last-used --access-key-id ${accessKeyId}", returnStdout: true).trim()
                                            def lastUsedDateRaw = jsonSlurper.parseText(lastUsed)
                                            def serviceName = lastUsedDateRaw.AccessKeyLastUsed.ServiceName
                                            def lastUsedDate = serviceName != "N/A" ? sh(script: "date -d '${lastUsedDateRaw.AccessKeyLastUsed.LastUsedDate}' +%s", returnStdout: true).trim() : "none"

                                            if (keyStatus == "Active") {
                                                ACTIVE_KEYS.add("${accessKeyId};${creationDate};${lastUsedDate}")
                                            } else {
                                                INACTIVE_KEY_ID = accessKeyId
                                            }
                                        } else {
                                            echo "AccessKeyId is null or empty for user: ${USER}"
                                        }
                                    }

                                    if (ACTIVE_KEYS.size() == 1 && INACTIVE_KEY_ID) {
                                        def keyInfo = ACTIVE_KEYS[0].split(";")
                                        def activeCreationEpoch = sh(script: "date -d '${keyInfo[1]}' +%s", returnStdout: true).trim().toLong()
                                        def currentEpoch = sh(script: "date +%s", returnStdout: true).trim().toLong()

                                        if (keyInfo[2] != "none" && (currentEpoch - activeCreationEpoch) > (30 * 24 * 3600)) {
                                            sh "aws iam delete-access-key --user-name ${USER} --access-key-id ${INACTIVE_KEY_ID}"
                                            sh "echo 'Deleted inactive access key for user: ${USER} (Key ID: ${INACTIVE_KEY_ID})' >> ${logfile}"
                                            def newAccessKeyInfo = sh(script: "aws iam create-access-key --user-name ${USER} --output json", returnStdout: true).trim()
                                            def newAccessKey = jsonSlurper.parseText(newAccessKeyInfo)
                                            sh """
                                            echo 'User: ${USER}' >> ${OUTPUT_DIR}/${USER}_access_keys.txt
                                            echo 'Access Key ID: ${newAccessKey.AccessKey.AccessKeyId} created on ${CURRENT_DATE}' >> ${OUTPUT_DIR}/${USER}_access_keys.txt
                                            echo 'Secret Access Key: ${newAccessKey.AccessKey.SecretAccessKey} created on ${CURRENT_DATE}' >> ${OUTPUT_DIR}/${USER}_access_keys.txt
                                            echo '-----------------------------------' >> ${OUTPUT_DIR}/${USER}_access_keys.txt
                                            """
                                            sh "echo 'Created new access keys for user: ${USER} and saved to ${OUTPUT_DIR}/${USER}_access_keys.txt' >> ${logfile}"
                                            OLD_KEYS_USERS.add(USER)
                                        } else {
                                            sh "echo 'The active key is not older than 30 days, no action taken.' >> ${logfile}"
                                        }
                                    } else if (ACTIVE_KEYS.size() == 2) {
                                        def oldestKeyId = ""
                                        def oldestLastUsedDateTs = ""
                                        def oldestLastUsedDateHuman = ""
                                        def keyWithNa = ""

                                        ACTIVE_KEYS.each { keyInfo ->
                                            def keyId, creationDate, lastUsedDate = keyInfo.split(";")
                                            echo "Processing key ID: ${keyId} for user: ${USER}"
                                            if (keyId) {
                                                def lastUsed = sh(script: "aws iam get-access-key-last-used --access-key-id ${keyId}", returnStdout: true).trim()
                                                def lastUsedDateRaw = jsonSlurper.parseText(lastUsed)
                                                def serviceName = lastUsedDateRaw.AccessKeyLastUsed.ServiceName
                                                def lastUsedDateTs = serviceName != "N/A" ? sh(script: "date -d '${lastUsedDateRaw.AccessKeyLastUsed.LastUsedDate}' +%s", returnStdout: true).trim().toLong() : "invalid"

                                                if (serviceName == "N/A") {
