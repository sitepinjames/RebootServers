pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-role
  restartPolicy: Never
  containers:
  - name: awscli
    image: amazon/aws-cli:latest
    command: ['cat']
    tty: true
  - name: jnlp
    image: jenkins/inbound-agent
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: mailer
    image: curlimages/curl:7.85.0
    command:
    - sh
    - -c
    - 'while true; do sleep 30; done'
"""
        }
    }

    stages {
        stage('AWS Config') {
            steps {
                container('awscli') {
                    script {
                        sh '''
                        aws sts assume-role \
                           --role-arn arn:aws:iam::894333990227:role/delegatedadmin/developer/cloudbee-eacms-role \
                           --role-session-name session \
                           --output text \
                           --query Credentials \
                           > /tmp/role-creds.txt

                        cat > .aws-creds <<EOF
[default]
aws_access_key_id = $(cut -f1 /tmp/role-creds.txt)
aws_secret_access_key = $(cut -f3 /tmp/role-creds.txt)
aws_session_token = $(cut -f4 /tmp/role-creds.txt)
EOF

                        mkdir -p $HOME/.aws
                        cp -v .aws-creds $HOME/.aws/credentials
                        unset AWS_WEB_IDENTITY_TOKEN_FILE

                        aws sts get-caller-identity
                        '''

                        env.AWS_ACCESS_KEY_ID = sh(script: "cut -f1 /tmp/role-creds.txt", returnStdout: true).trim()
                        env.AWS_SECRET_ACCESS_KEY = sh(script: "cut -f3 /tmp/role-creds.txt", returnStdout: true).trim()
                        env.AWS_SESSION_TOKEN = sh(script: "cut -f4 /tmp/role-creds.txt", returnStdout: true).trim()
                    }
                }
            }
        }
        
        stage('Checking Keys Age and Rotate') {
            steps {
                container('awscli') { 
                    script {
                        try {
                            def USERS_FILE = readFile('users.txt').split('\n').collect { it.trim() }
                            def OLD_KEYS_USERS = []
                            
                            // Enhanced error handling for CURRENT_DATE
                            try {
                                def CURRENT_DATE = sh(script: "date +%Y-%m-%d", returnStdout: true).trim()
                                echo "Current Date: ${CURRENT_DATE}"
                            } catch (Exception e) {
                                echo "Error getting current date: ${e}"
                            }

                            isValidUsername = { username ->
                                return username ==~ /^[a-zA-Z0-9+=,.@_-]+$/
                            }

                            USERS_FILE.each { USER ->
                                if (!isValidUsername(USER)) {
                                    sh "echo 'Invalid username: ${USER}. Skipping...' "
                                    return
                                }
                                sh "echo 'Checking access keys for user: ${USER}' "
                                def ACCESS_KEYS = sh(script: "aws iam list-access-keys --user-name ${USER} --output json", returnStdout: true).trim()
                                def ACTIVE_KEYS = []
                                def INACTIVE_KEY_ID = ""

                                if (ACCESS_KEYS) {
                                    def keys = readJSON text: ACCESS_KEYS
                                    keys.AccessKeyMetadata.each { key ->
                                        def keyStatus = key.Status
                                        def creationDate = key.CreateDate
                                        def accessKeyId = key.AccessKeyId
                                        if (accessKeyId) {
                                        def lastUsed = sh(script: "aws iam get-access-key-last-used --access-key-id ${accessKeyId}", returnStdout: true).trim()
                                        def lastUsedDateRaw = readJSON text: lastUsed
                                        def serviceName = lastUsedDateRaw.AccessKeyLastUsed.ServiceName
                                        def lastUsedDate = "none"
                                        def HumanLastUsedDate= "none"
                                        if (serviceName != "N/A") {
                                            lastUsedDate = sh(script: "date -d '${lastUsedDateRaw.AccessKeyLastUsed.LastUsedDate}' +%s", returnStdout: true).trim()
                                            HumanLastUsedDate= sh(script: "date -d '@${lastUsedDate}' '+%Y-%m-%d %H:%M:%S %Z'", returnStdout: true).trim()
                                        }

                                        if (keyStatus == "Active") {
                                            // Debug: Print the key status, ID, and dates
                                            echo "Active Key Found - Key ID: ${accessKeyId}, Creation Date: ${creationDate}, Last Used Date: ${HumanLastUsedDate}"
                                            // Ensure all parts are correctly formatted and not null
                                            if (accessKeyId && creationDate && lastUsedDate) {
                                                ACTIVE_KEYS.add("${accessKeyId};${creationDate};${HumanLastUsedDate}")
                                            } else {
                                                 echo "Error: One or more parts of the key information are null or improperly formatted."
                                            }
                                        } else {
                                            INACTIVE_KEY_ID = accessKeyId
                                        }
                                    }
                                    }

                                    if (ACTIVE_KEYS.size() == 1 && INACTIVE_KEY_ID) {
                                        sh "echo 'User $USER has one active key and one inactive key. Checking conditions...' "
                                        def keyInfo = ACTIVE_KEYS[0].split(";")
                                        def activeCreationEpoch = sh(script: "date -d '${keyInfo[1]}' +%s", returnStdout: true).trim().toLong()
                                        def currentEpoch = sh(script: "date +%s", returnStdout: true).trim().toLong()

                                        if (keyInfo[2] != "none" && (currentEpoch - activeCreationEpoch) > (2 * 24 * 3600)) {
                                            sh "aws iam delete-access-key --user-name ${USER} --access-key-id ${INACTIVE_KEY_ID}"
                                            sh "echo 'Deleted inactive access key for user: ${USER} (Key ID: ${INACTIVE_KEY_ID})' "
                                            def newAccessKeyInfo = sh(script: "aws iam create-access-key --user-name ${USER} --output json", returnStdout: true).trim()
                                            def newAccessKey = readJSON text: newAccessKeyInfo
                                            sh """
                                            echo 'User: ${USER}' 
                                            echo 'Access Key ID: ${newAccessKey.AccessKey.AccessKeyId} created on ${CURRENT_DATE}' 
                                            echo 'Secret Access Key: ${newAccessKey.AccessKey.SecretAccessKey} created on ${CURRENT_DATE}' 
                                            echo '-----------------------------------' 
                                            """
                                            sh "echo 'Created new access keys for user: ${USER} and saved ' "
                                            OLD_KEYS_USERS.add(USER)
                                        } else {
                                            sh "echo 'The active key is not older than 30 days, no action taken. ' "
                                        }
                                    } else if (ACTIVE_KEYS.size() == 2) {
                                        sh "echo 'User $USER has two active keys. Checking their last used dates...' "
                                        def oldestKeyId = ""
                                        def oldestLastUsedDateTs = ""
                                        def oldestLastUsedDateHuman = ""
                                        def keyWithNa = ""
                                        // Debug: Print active keys information
                                        echo "Active Keys: ${ACTIVE_KEYS}"
                                        ACTIVE_KEYS.each { keyInfo ->
                                            // Enhanced debugging: Print raw keyInfo
                                            echo "Raw KeyInfo: ${keyInfo}"
                                            // Adjusted split logic to handle potential issues
                                            def keyInfoParts = keyInfo.split(";")
                                            if (keyInfoParts.size() == 3) {
                                                def keyId = keyInfoParts[0].trim()
                                                def creationDate = keyInfoParts[1].trim()
                                                def lastUsedDate = keyInfoParts[2].trim()
                                                // Debug: Print each keyInfo split result
                                                echo "KeyInfo Split - Key ID: ${keyId}, Creation Date: ${creationDate}, Last Used Date: ${lastUsedDate}"
                                            if (!keyId || keyId.length() < 16) {
                                                echo "Invalid or null Access Key ID: ${keyId}"
                                                return
                                            }
                                            def lastUsed = sh(script: "aws iam get-access-key-last-used --access-key-id ${keyId}", returnStdout: true).trim()
                                            def lastUsedDateRaw = readJSON text: lastUsed
                                            def serviceName = lastUsedDateRaw.AccessKeyLastUsed.ServiceName
                                            def lastUsedDateTs = serviceName != "N/A" ? sh(script: "date -d '${lastUsedDateRaw.AccessKeyLastUsed.LastUsedDate}' +%s", returnStdout: true).trim().toLong() : "invalid"
                                            
                                            // Debug: Print last used date information
                                            echo "Key ID: ${keyId}, Last Used Date TS: ${lastUsedDateTs}, ServiceName: ${serviceName}"
                                            if (serviceName == "N/A") {
                                                keyWithNa = keyId
                                                sh "echo 'Key ${keyId} has never been used (ServiceName: N/A), marking it for deletion. ' "
                                            } else if (lastUsedDateTs != "invalid" && (!oldestLastUsedDateTs || lastUsedDateTs < oldestLastUsedDateTs)) {
                                                oldestLastUsedDateTs = lastUsedDateTs
                                                oldestKeyId = keyId
                                                oldestLastUsedDateHuman = sh(script: "date -d '@${lastUsedDateTs}' '+%Y-%m-%d %H:%M:%S %Z'", returnStdout: true).trim()
                                                sh "echo 'The oldest key is ${oldestKeyId} and was last used on ${oldestLastUsedDateHuman}' "
                                            }
                                        } else {
                                            echo "Error: Unexpected keyInfo format: ${keyInfo}"
                                            }
                                        }
                                         // Debug: Print decision making process
                                        echo "KeyWithNa: ${keyWithNa}, OldestKeyId: ${oldestKeyId}"
                                        if (keyWithNa) {
                                            sh "aws iam delete-access-key --user-name ${USER} --access-key-id ${keyWithNa}"
                                            sh "echo 'Deleted access key that was never used for user: ${USER} (Key ID: ${keyWithNa})' "
                                        } 
                                        if (oldestKeyId) {
                                            def oldestCreationDate = sh(script: "date -d '${oldestKeyId.split(';')[1]}' +%s", returnStdout: true).trim().toLong()
                                            def currentEpoch = sh(script: "date +%s", returnStdout: true).trim().toLong()

                                            if ((currentEpoch - oldestCreationDate) > (3 * 24 * 3600)) { 
                                                sh "aws iam delete-access-key --user-name ${USER} --access-key-id ${oldestKeyId}"
                                                sh "echo 'Deleted oldest active access key for user: ${USER} (Key ID: ${oldestKeyId}), Last Used: ${oldestLastUsedDateHuman}' "
                                                //def newAccessKeyInfo = sh(script: "aws iam create-access-key --user-name ${USER} --output json", returnStdout: true).
                                                def newAccessKeyInfo = sh(script: "aws iam create-access-key --user-name ${USER} --output json", returnStdout: true).trim()
                                                def newAccessKey = readJSON text: newAccessKeyInfo
                                                sh """
                                                echo 'User: ${USER}' 
                                                echo 'Access Key ID: ${newAccessKey.AccessKey.AccessKeyId} created on ${CURRENT_DATE}' 
                                                echo 'Secret Access Key: ${newAccessKey.AccessKey.SecretAccessKey} created on ${CURRENT_DATE}' 
                                                echo '-----------------------------------' 
                                                """
                                                sh "echo 'Created new access keys for user: ${USER} and saved' "
                                                OLD_KEYS_USERS.add(USER)
                                            } else {
                                                sh "echo 'The active key is not older than 30 days, no action taken.' "
                                            }
                                         }
                                   } else {
                                        sh "echo 'No valid conditions met for user: ${USER}.' "
                                    }
                                } else {
                                sh "echo 'No access keys found for user: ${USER}' "
                            }
                        }

                        // Notify users about old keys rotation
                        if (OLD_KEYS_USERS.size() > 0) {
                            sh "echo 'Notification: The following users had old keys rotated: ${OLD_KEYS_USERS.join(", ")}"
                        }
                        } catch (Exception e) {
                            echo "Error occurred during key rotation: ${e}"
                        }
                    }
                }
            }
        }
    }
}

