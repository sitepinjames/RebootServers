if (lastUsedDateTs != "invalid" && (!oldestLastUsedDateTs || lastUsedDateTs < oldestLastUsedDateTs)) {
    oldestLastUsedDateTs = lastUsedDateTs
    oldestKeyId = keyId + ";" + creationDate + ";" + lastUsedDate
    oldestLastUsedDateHuman = sh(script: "date -d '@${lastUsedDateTs}' '+%Y-%m-%d %H:%M:%S %Z'", returnStdout: true).trim()
    sh "echo 'The oldest key is ${oldestKeyId} and was last used on ${oldestLastUsedDateHuman}'"
}

if (oldestKeyId) {
    try {
        def keyInfoParts = oldestKeyId.split(";")
        if (keyInfoParts.size() == 3) {
            def oldestCreationDate = sh(script: "date -d '${keyInfoParts[1]}' +%s", returnStdout: true).trim().toLong()
            def currentEpoch = sh(script: "date +%s", returnStdout: true).trim().toLong()

            if ((currentEpoch - oldestCreationDate) > (3 * 24 * 3600)) {
                sh "aws iam delete-access-key --user-name ${USER} --access-key-id ${keyInfoParts[0]}"
                sh "echo 'Deleted oldest active access key for user: ${USER} (Key ID: ${keyInfoParts[0]}), Last Used: ${oldestLastUsedDateHuman}'"
                def newAccessKeyInfo = sh(script: "aws iam create-access-key --user-name ${USER} --output json", returnStdout: true).trim()
                def newAccessKey = readJSON text: newAccessKeyInfo
                sh """
                echo 'User: ${USER}' 
                echo 'Access Key ID: ${newAccessKey.AccessKey.AccessKeyId} created on ${CURRENT_DATE}' 
                echo 'Secret Access Key: ${newAccessKey.AccessKey.SecretAccessKey} created on ${CURRENT_DATE}' 
                echo '-----------------------------------' 
                """
                sh "echo 'Created new access keys for user: ${USER} and saved'"
                OLD_KEYS_USERS.add(USER)
            } else {
                sh "echo 'The active key is not older than 30 days, no action taken.'"
            }
        } else {
            echo "Error: Invalid format for oldestKeyId: ${oldestKeyId}"
        }
    } catch (Exception e) {
        echo "Error processing oldest key: ${e}"
    }
}
