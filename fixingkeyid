pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-role
  restartPolicy: Never
  containers:
  - name: awscli
    image: amazon/aws-cli:latest
    command: ['cat']
    tty: true
  - name: jnlp
    image: jenkins/inbound-agent
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: mailer
    image: curlimages/curl:7.85.0
    command:
    - sh
    - -c
    - 'while true; do sleep 30; done'
"""
        }
    }
  
    environment {
        ACCESS_KEYS = ''
        
    }
    stages {
            stage('aws config') {
               steps {
                   container('awscli') {
                       script {
                            sh '''
                            # Generate the credentials file
                            aws sts assume-role \
                               --role-arn arn:aws:iam::894333990227:role/delegatedadmin/developer/cloudbee-eacms-role \
                               --role-session-name session \
                               --output text \
                               --query Credentials \
                               > /tmp/role-creds.txt
                            cat > .aws-creds <<EOF
[default]
aws_access_key_id = $(cut -f1 /tmp/role-creds.txt)
aws_secret_access_key = $(cut -f3 /tmp/role-creds.txt)
aws_session_token = $(cut -f4 /tmp/role-creds.txt)
EOF

                            # Copy the credentials file to its default location and remove variable from
                            # the shell environment to assume role in the ADO account.
                            mkdir -p $HOME/.aws
                            cp -v .aws-creds $HOME/.aws/credentials
                            unset AWS_WEB_IDENTITY_TOKEN_FILE

                            # Run AWS command to test the assume role. 
                            aws sts get-caller-identity
                            '''
                        
                            // Set environment variables for AWS credentials
                            def awsAccessKeyId = sh(script: "cut -f1 /tmp/role-creds.txt", returnStdout: true).trim()
                            def awsSecretAccessKey = sh(script: "cut -f3 /tmp/role-creds.txt", returnStdout: true).trim()
                            def awsSessionToken = sh(script: "cut -f4 /tmp/role-creds.txt", returnStdout: true).trim()

                            env.AWS_ACCESS_KEY_ID = awsAccessKeyId
                            env.AWS_SECRET_ACCESS_KEY = awsSecretAccessKey
                            env.AWS_SESSION_TOKEN = awsSessionToken
                       }
                   }
               }
            }
            
            stage('Creating access key') {
                steps {
                   container('awscli') { 
                       script {
                           //sh "aws iam create-access-key --user-name testuser --output json"
                           def nextfinalaccesskey= sh(script: "aws iam list-access-keys --user-name testuser --output json", returnStdout: true).trim()
                           writeFile file: 'access_keys.txt', text: nextfinalaccesskey
                           echo "Anothertest"
                       }
                   }
                }
            }
                           
                    
            stage('Build') {
                steps {
                    echo " created access keys"
                }
            }
    }
            post {
                always {
                    emailext (
                        to : 'michael.myemail@example.com',
                        subject: 'Build Notification',
                        body: 'Please find the encrypted access keys attached.', 
                        attachmentsPattern: 'access_keys.txt'
                    
                    )
                }
            }
    }
    
